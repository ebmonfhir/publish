# FHIR GraphQL Schema. Version 4.1.0

# import the types from 'types.graphql'

type MedicationAdministration {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  instantiatesCanonical: canonical  _instantiatesCanonical: [ElementBase]
  instantiatesUri: uri  _instantiatesUri: [ElementBase]
  partOf: [Reference]
  status: code  _status: ElementBase
  statusReason: [CodeableConcept]
  category: [CodeableConcept]
  medicationCodeableConcept: CodeableConcept
  medicationReference: Reference
  subject: Reference!
  encounter: Reference
  supportingInformation: [Reference]
  occurenceDateTime: dateTime  _occurenceDateTime: ElementBase
  occurencePeriod: Period
  recorded: dateTime  _recorded: ElementBase
  performer: [MedicationAdministrationPerformer]
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  request: Reference
  device: [Reference]
  note: [Annotation]
  dosage: MedicationAdministrationDosage
  eventHistory: [Reference]
}

type MedicationAdministrationPerformer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  function: CodeableConcept
  actor: Reference!
}

type MedicationAdministrationDosage {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  text: String  _text: ElementBase
  site: CodeableConcept
  route: CodeableConcept
  method: CodeableConcept
  dose: Quantity
  rateRatio: Ratio
  rateQuantity: Quantity
}

input MedicationAdministrationInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  instantiatesCanonical: canonical  _instantiatesCanonical: [ElementBase]
  instantiatesUri: uri  _instantiatesUri: [ElementBase]
  partOf: [ReferenceInput]
  status: code  _status: ElementBase
  statusReason: [CodeableConceptInput]
  category: [CodeableConceptInput]
  medicationCodeableConcept: CodeableConceptInput
  medicationReference: ReferenceInput
  subject: ReferenceInput!
  encounter: ReferenceInput
  supportingInformation: [ReferenceInput]
  occurenceDateTime: dateTime  _occurenceDateTime: ElementBase
  occurencePeriod: PeriodInput
  recorded: dateTime  _recorded: ElementBase
  performer: [MedicationAdministrationPerformerInput]
  reasonCode: [CodeableConceptInput]
  reasonReference: [ReferenceInput]
  request: ReferenceInput
  device: [ReferenceInput]
  note: [AnnotationInput]
  dosage: MedicationAdministrationDosageInput
  eventHistory: [ReferenceInput]
}

input MedicationAdministrationPerformerInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  function: CodeableConceptInput
  actor: ReferenceInput!
}

input MedicationAdministrationDosageInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  text: String  _text: ElementBase
  site: CodeableConceptInput
  route: CodeableConceptInput
  method: CodeableConceptInput
  dose: QuantityInput
  rateRatio: RatioInput
  rateQuantity: QuantityInput
}

type MedicationAdministrationReadType {
  MedicationAdministration(id: ID!): MedicationAdministration
}

type MedicationAdministrationListType {
  MedicationAdministrationList(_filter: String
    code: [token]
    date: [date]
    device: [reference]
    encounter: [reference]
    identifier: [token]
    medication: [reference]
    patient: [reference]
    performer: [reference]
    reason_given: [token]
    reason_not_given: [token]
    request: [reference]
    status: [token]
    subject: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [MedicationAdministration]
}

type MedicationAdministrationConnectionType {
  MedicationAdministrationConection(_filter: String
    code: [token]
    date: [date]
    device: [reference]
    encounter: [reference]
    identifier: [token]
    medication: [reference]
    patient: [reference]
    performer: [reference]
    reason_given: [token]
    reason_not_given: [token]
    request: [reference]
    status: [token]
    subject: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): MedicationAdministrationConnection
}

type MedicationAdministrationConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [MedicationAdministrationEdge]
}

type MedicationAdministrationEdge {
  mode: String
  score: Float
  resource: MedicationAdministration
}

type MedicationAdministrationCreateType {
  MedicationAdministrationCreate(resource: MedicationAdministrationInput): MedicationAdministrationCreation
}

type MedicationAdministrationCreation {
  location: String
  resource: MedicationAdministration
  information: OperationOutcome
}

type MedicationAdministrationUpdateType {
  MedicationAdministrationUpdate(id: ID, resource: MedicationAdministrationInput): MedicationAdministrationUpdate
}

type MedicationAdministrationUpdate {
  resource: MedicationAdministration
  information: OperationOutcome
}

type MedicationAdministrationDeleteType {
  MedicationAdministrationDelete(id: ID): MedicationAdministrationDelete
}

type MedicationAdministrationDelete {
  information: OperationOutcome
}

