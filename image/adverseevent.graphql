# FHIR GraphQL Schema. Version 4.1.0

type AdverseEvent {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  actuality: code  _actuality: ElementBase
  category: [CodeableConcept]
  event: CodeableConcept
  subject: Reference!
  encounter: Reference
  date: dateTime  _date: ElementBase
  detected: dateTime  _detected: ElementBase
  recordedDate: dateTime  _recordedDate: ElementBase
  resultingCondition: [Reference]
  location: Reference
  seriousness: CodeableConcept
  severity: CodeableConcept
  outcome: CodeableConcept
  recorder: Reference
  contributor: [Reference]
  detector: [Reference]
  suspectEntity: [AdverseEventSuspectEntity]
  subjectMedicalHistory: [Reference]
  referenceDocument: [Reference]
  study: [Reference]
}

type AdverseEventSuspectEntity {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  instanceCodeableConcept: CodeableConcept
  instanceReference: Reference
  causality: [AdverseEventSuspectEntityCausality]
}

type AdverseEventSuspectEntityCausality {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  assessment: CodeableConcept
  productRelatedness: String  _productRelatedness: ElementBase
  author: Reference
  method: CodeableConcept
}

input AdverseEventInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  actuality: code  _actuality: ElementBase
  category: [CodeableConceptInput]
  event: CodeableConceptInput
  subject: ReferenceInput!
  encounter: ReferenceInput
  date: dateTime  _date: ElementBase
  detected: dateTime  _detected: ElementBase
  recordedDate: dateTime  _recordedDate: ElementBase
  resultingCondition: [ReferenceInput]
  location: ReferenceInput
  seriousness: CodeableConceptInput
  severity: CodeableConceptInput
  outcome: CodeableConceptInput
  recorder: ReferenceInput
  contributor: [ReferenceInput]
  detector: [ReferenceInput]
  suspectEntity: [AdverseEventSuspectEntityInput]
  subjectMedicalHistory: [ReferenceInput]
  referenceDocument: [ReferenceInput]
  study: [ReferenceInput]
}

input AdverseEventSuspectEntityInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  instanceCodeableConcept: CodeableConceptInput
  instanceReference: ReferenceInput
  causality: [AdverseEventSuspectEntityCausalityInput]
}

input AdverseEventSuspectEntityCausalityInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  assessment: CodeableConceptInput
  productRelatedness: String  _productRelatedness: ElementBase
  author: ReferenceInput
  method: CodeableConceptInput
}

type AdverseEventReadType {
  AdverseEvent(id: ID!): AdverseEvent
}

type AdverseEventListType {
  AdverseEventList(_filter: String
    actuality: [token]
    category: [token]
    date: [date]
    event: [token]
    location: [reference]
    recorder: [reference]
    resultingcondition: [reference]
    seriousness: [token]
    severity: [token]
    study: [reference]
    subject: [reference]
    substance: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [AdverseEvent]
}

type AdverseEventConnectionType {
  AdverseEventConection(_filter: String
    actuality: [token]
    category: [token]
    date: [date]
    event: [token]
    location: [reference]
    recorder: [reference]
    resultingcondition: [reference]
    seriousness: [token]
    severity: [token]
    study: [reference]
    subject: [reference]
    substance: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): AdverseEventConnection
}

type AdverseEventConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [AdverseEventEdge]
}

type AdverseEventEdge {
  mode: String
  score: Float
  resource: AdverseEvent
}

type AdverseEventCreateType {
  AdverseEventCreate(resource: AdverseEventInput): AdverseEventCreation
}

type AdverseEventCreation {
  location: String
  resource: AdverseEvent
  information: OperationOutcome
}

type AdverseEventUpdateType {
  AdverseEventUpdate(id: ID, resource: AdverseEventInput): AdverseEventUpdate
}

type AdverseEventUpdate {
  resource: AdverseEvent
  information: OperationOutcome
}

type AdverseEventDeleteType {
  AdverseEventDelete(id: ID): AdverseEventDelete
}

type AdverseEventDelete {
  information: OperationOutcome
}

