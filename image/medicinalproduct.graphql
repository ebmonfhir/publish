# FHIR GraphQL Schema. Version 4.1.0

type MedicinalProduct {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  type: CodeableConcept
  domain: Coding
  combinedPharmaceuticalDoseForm: CodeableConcept
  indication: String  _indication: ElementBase
  legalStatusOfSupply: CodeableConcept
  additionalMonitoringIndicator: CodeableConcept
  specialMeasures: String  _specialMeasures: [ElementBase]
  paediatricUseIndicator: CodeableConcept
  productClassification: [CodeableConcept]
  marketingStatus: [MarketingStatus]
  pharmaceuticalProduct: [Reference]
  packagedMedicinalProduct: [Reference]
  attachedDocument: [Reference]
  masterFile: [Reference]
  contact: [MedicinalProductContact]
  clinicalTrial: [Reference]
  name: [MedicinalProductName]!
  crossReference: [Identifier]
  manufacturingBusinessOperation: [MedicinalProductManufacturingBusinessOperation]
  specialDesignation: [MedicinalProductSpecialDesignation]
}

type MedicinalProductContact {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  contact: Reference!
}

type MedicinalProductName {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  productName: String  _productName: ElementBase
  namePart: [MedicinalProductNameNamePart]
  countryLanguage: [MedicinalProductNameCountryLanguage]
}

type MedicinalProductNameNamePart {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  part: String  _part: ElementBase
  type: Coding!
}

type MedicinalProductNameCountryLanguage {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  country: CodeableConcept!
  jurisdiction: CodeableConcept
  language: CodeableConcept!
}

type MedicinalProductManufacturingBusinessOperation {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  operationType: CodeableConcept
  authorisationReferenceNumber: Identifier
  effectiveDate: dateTime  _effectiveDate: ElementBase
  confidentialityIndicator: CodeableConcept
  manufacturer: [Reference]
  regulator: Reference
}

type MedicinalProductSpecialDesignation {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  type: CodeableConcept
  intendedUse: CodeableConcept
  indicationCodeableConcept: CodeableConcept
  indicationReference: Reference
  status: CodeableConcept
  date: dateTime  _date: ElementBase
  species: CodeableConcept
}

input MedicinalProductInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  type: CodeableConceptInput
  domain: CodingInput
  combinedPharmaceuticalDoseForm: CodeableConceptInput
  indication: String  _indication: ElementBase
  legalStatusOfSupply: CodeableConceptInput
  additionalMonitoringIndicator: CodeableConceptInput
  specialMeasures: String  _specialMeasures: [ElementBase]
  paediatricUseIndicator: CodeableConceptInput
  productClassification: [CodeableConceptInput]
  marketingStatus: [MarketingStatusInput]
  pharmaceuticalProduct: [ReferenceInput]
  packagedMedicinalProduct: [ReferenceInput]
  attachedDocument: [ReferenceInput]
  masterFile: [ReferenceInput]
  contact: [MedicinalProductContactInput]
  clinicalTrial: [ReferenceInput]
  name: [MedicinalProductNameInput]!
  crossReference: [IdentifierInput]
  manufacturingBusinessOperation: [MedicinalProductManufacturingBusinessOperationInput]
  specialDesignation: [MedicinalProductSpecialDesignationInput]
}

input MedicinalProductContactInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput
  contact: ReferenceInput!
}

input MedicinalProductNameInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  productName: String  _productName: ElementBase
  namePart: [MedicinalProductNameNamePartInput]
  countryLanguage: [MedicinalProductNameCountryLanguageInput]
}

input MedicinalProductNameNamePartInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  part: String  _part: ElementBase
  type: CodingInput!
}

input MedicinalProductNameCountryLanguageInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  country: CodeableConceptInput!
  jurisdiction: CodeableConceptInput
  language: CodeableConceptInput!
}

input MedicinalProductManufacturingBusinessOperationInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  operationType: CodeableConceptInput
  authorisationReferenceNumber: IdentifierInput
  effectiveDate: dateTime  _effectiveDate: ElementBase
  confidentialityIndicator: CodeableConceptInput
  manufacturer: [ReferenceInput]
  regulator: ReferenceInput
}

input MedicinalProductSpecialDesignationInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  type: CodeableConceptInput
  intendedUse: CodeableConceptInput
  indicationCodeableConcept: CodeableConceptInput
  indicationReference: ReferenceInput
  status: CodeableConceptInput
  date: dateTime  _date: ElementBase
  species: CodeableConceptInput
}

type MedicinalProductReadType {
  MedicinalProduct(id: ID!): MedicinalProduct
}

type MedicinalProductListType {
  MedicinalProductList(_filter: String
    identifier: [token]
    name: [String]
    name_language: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [MedicinalProduct]
}

type MedicinalProductConnectionType {
  MedicinalProductConection(_filter: String
    identifier: [token]
    name: [String]
    name_language: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): MedicinalProductConnection
}

type MedicinalProductConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [MedicinalProductEdge]
}

type MedicinalProductEdge {
  mode: String
  score: Float
  resource: MedicinalProduct
}

type MedicinalProductCreateType {
  MedicinalProductCreate(resource: MedicinalProductInput): MedicinalProductCreation
}

type MedicinalProductCreation {
  location: String
  resource: MedicinalProduct
  information: OperationOutcome
}

type MedicinalProductUpdateType {
  MedicinalProductUpdate(id: ID, resource: MedicinalProductInput): MedicinalProductUpdate
}

type MedicinalProductUpdate {
  resource: MedicinalProduct
  information: OperationOutcome
}

type MedicinalProductDeleteType {
  MedicinalProductDelete(id: ID): MedicinalProductDelete
}

type MedicinalProductDelete {
  information: OperationOutcome
}

