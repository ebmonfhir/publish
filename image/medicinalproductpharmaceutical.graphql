# FHIR GraphQL Schema. Version 4.1.0

type MedicinalProductPharmaceutical {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  subject: [Reference]
  administrableDoseForm: CodeableConcept!
  unitOfPresentation: CodeableConcept
  ingredient: [Reference]
  device: [Reference]
  characteristics: [MedicinalProductPharmaceuticalCharacteristics]
  routeOfAdministration: [MedicinalProductPharmaceuticalRouteOfAdministration]!
}

type MedicinalProductPharmaceuticalCharacteristics {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  status: CodeableConcept
}

type MedicinalProductPharmaceuticalRouteOfAdministration {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  firstDose: Quantity
  maxSingleDose: Quantity
  maxDosePerDay: Quantity
  maxDosePerTreatmentPeriod: Ratio
  maxTreatmentPeriod: Duration
  targetSpecies: [MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies]
}

type MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  withdrawalPeriod: [MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod]
}

type MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  tissue: CodeableConcept!
  value: Quantity!
  supportingInformation: String  _supportingInformation: ElementBase
}

input MedicinalProductPharmaceuticalInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  subject: [ReferenceInput]
  administrableDoseForm: CodeableConceptInput!
  unitOfPresentation: CodeableConceptInput
  ingredient: [ReferenceInput]
  device: [ReferenceInput]
  characteristics: [MedicinalProductPharmaceuticalCharacteristicsInput]
  routeOfAdministration: [MedicinalProductPharmaceuticalRouteOfAdministrationInput]!
}

input MedicinalProductPharmaceuticalCharacteristicsInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: CodeableConceptInput!
  status: CodeableConceptInput
}

input MedicinalProductPharmaceuticalRouteOfAdministrationInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: CodeableConceptInput!
  firstDose: QuantityInput
  maxSingleDose: QuantityInput
  maxDosePerDay: QuantityInput
  maxDosePerTreatmentPeriod: RatioInput
  maxTreatmentPeriod: DurationInput
  targetSpecies: [MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesInput]
}

input MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: CodeableConceptInput!
  withdrawalPeriod: [MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodInput]
}

input MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  tissue: CodeableConceptInput!
  value: QuantityInput!
  supportingInformation: String  _supportingInformation: ElementBase
}

type MedicinalProductPharmaceuticalReadType {
  MedicinalProductPharmaceutical(id: ID!): MedicinalProductPharmaceutical
}

type MedicinalProductPharmaceuticalListType {
  MedicinalProductPharmaceuticalList(_filter: String
    identifier: [token]
    route: [token]
    subject: [reference]
    target_species: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [MedicinalProductPharmaceutical]
}

type MedicinalProductPharmaceuticalConnectionType {
  MedicinalProductPharmaceuticalConection(_filter: String
    identifier: [token]
    route: [token]
    subject: [reference]
    target_species: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): MedicinalProductPharmaceuticalConnection
}

type MedicinalProductPharmaceuticalConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [MedicinalProductPharmaceuticalEdge]
}

type MedicinalProductPharmaceuticalEdge {
  mode: String
  score: Float
  resource: MedicinalProductPharmaceutical
}

type MedicinalProductPharmaceuticalCreateType {
  MedicinalProductPharmaceuticalCreate(resource: MedicinalProductPharmaceuticalInput): MedicinalProductPharmaceuticalCreation
}

type MedicinalProductPharmaceuticalCreation {
  location: String
  resource: MedicinalProductPharmaceutical
  information: OperationOutcome
}

type MedicinalProductPharmaceuticalUpdateType {
  MedicinalProductPharmaceuticalUpdate(id: ID, resource: MedicinalProductPharmaceuticalInput): MedicinalProductPharmaceuticalUpdate
}

type MedicinalProductPharmaceuticalUpdate {
  resource: MedicinalProductPharmaceutical
  information: OperationOutcome
}

type MedicinalProductPharmaceuticalDeleteType {
  MedicinalProductPharmaceuticalDelete(id: ID): MedicinalProductPharmaceuticalDelete
}

type MedicinalProductPharmaceuticalDelete {
  information: OperationOutcome
}

