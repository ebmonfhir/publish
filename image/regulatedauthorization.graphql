# FHIR GraphQL Schema. Version 4.1.0

# import the types from 'types.graphql'

type RegulatedAuthorization {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  subject: Reference
  type: CodeableConcept
  description: String  _description: ElementBase
  region: [CodeableConcept]
  status: CodeableConcept
  statusDate: dateTime  _statusDate: ElementBase
  validityPeriod: Period
  basis: [CodeableConcept]
  relatedDate: [RegulatedAuthorizationRelatedDate]
  jurisdictionalAuthorization: [Reference]
  holder: Reference
  regulator: Reference
  case: RegulatedAuthorizationCase
}

type RegulatedAuthorizationRelatedDate {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  datePeriod: Period
  dateDateTime: dateTime  _dateDateTime: ElementBase
  type: CodeableConcept!
}

type RegulatedAuthorizationCase {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: Identifier
  type: CodeableConcept
  status: CodeableConcept
  datePeriod: Period
  dateDateTime: dateTime  _dateDateTime: ElementBase
  application: [RegulatedAuthorizationCase]
}

input RegulatedAuthorizationInput {
  id: String
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  subject: ReferenceInput
  type: CodeableConceptInput
  description: String  _description: ElementBase
  region: [CodeableConceptInput]
  status: CodeableConceptInput
  statusDate: dateTime  _statusDate: ElementBase
  validityPeriod: PeriodInput
  basis: [CodeableConceptInput]
  relatedDate: [RegulatedAuthorizationRelatedDateInput]
  jurisdictionalAuthorization: [ReferenceInput]
  holder: ReferenceInput
  regulator: ReferenceInput
  case: RegulatedAuthorizationCaseInput
}

input RegulatedAuthorizationRelatedDateInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  datePeriod: PeriodInput
  dateDateTime: dateTime  _dateDateTime: ElementBase
  type: CodeableConceptInput!
}

input RegulatedAuthorizationCaseInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: IdentifierInput
  type: CodeableConceptInput
  status: CodeableConceptInput
  datePeriod: PeriodInput
  dateDateTime: dateTime  _dateDateTime: ElementBase
  application: [RegulatedAuthorizationCase]
}

type RegulatedAuthorizationReadType {
  RegulatedAuthorization(id: ID!): RegulatedAuthorization
}

type RegulatedAuthorizationListType {
  RegulatedAuthorizationList(_filter: String
    case: [token]
    holder: [reference]
    identifier: [token]
    region: [token]
    status: [token]
    subject: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [RegulatedAuthorization]
}

type RegulatedAuthorizationConnectionType {
  RegulatedAuthorizationConection(_filter: String
    case: [token]
    holder: [reference]
    identifier: [token]
    region: [token]
    status: [token]
    subject: [reference]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): RegulatedAuthorizationConnection
}

type RegulatedAuthorizationConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [RegulatedAuthorizationEdge]
}

type RegulatedAuthorizationEdge {
  mode: String
  score: Float
  resource: RegulatedAuthorization
}

type RegulatedAuthorizationCreateType {
  RegulatedAuthorizationCreate(resource: RegulatedAuthorizationInput): RegulatedAuthorizationCreation
}

type RegulatedAuthorizationCreation {
  location: String
  resource: RegulatedAuthorization
  information: OperationOutcome
}

type RegulatedAuthorizationUpdateType {
  RegulatedAuthorizationUpdate(id: ID, resource: RegulatedAuthorizationInput): RegulatedAuthorizationUpdate
}

type RegulatedAuthorizationUpdate {
  resource: RegulatedAuthorization
  information: OperationOutcome
}

type RegulatedAuthorizationDeleteType {
  RegulatedAuthorizationDelete(id: ID): RegulatedAuthorizationDelete
}

type RegulatedAuthorizationDelete {
  information: OperationOutcome
}

