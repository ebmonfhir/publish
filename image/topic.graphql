# FHIR GraphQL Schema. Version 4.1.0

# import the types from 'types.graphql'

type Topic {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  title: String  _title: ElementBase
  derivedFromCanonical: canonical  _derivedFromCanonical: [ElementBase]
  derivedFromUri: uri  _derivedFromUri: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: Reference
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: Period
  resourceTrigger: TopicResourceTrigger
  canFilterBy: [TopicCanFilterBy]
}

type TopicResourceTrigger {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  description: String  _description: ElementBase
  resourceType: code  _resourceType: [ElementBase]
  methodCriteria: code  _methodCriteria: [ElementBase]
  queryCriteria: TopicResourceTriggerQueryCriteria
  fhirPathCriteria: String  _fhirPathCriteria: ElementBase
}

type TopicResourceTriggerQueryCriteria {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  previous: String  _previous: ElementBase
  current: String  _current: ElementBase
  requireBoth: Boolean  _requireBoth: ElementBase
}

type TopicCanFilterBy {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  name: String  _name: ElementBase
  matchType: code  _matchType: [ElementBase]
  documentation: markdown  _documentation: ElementBase
}

input TopicInput {
  id: String
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBase
  identifier: [IdentifierInput]
  version: String  _version: ElementBase
  title: String  _title: ElementBase
  derivedFromCanonical: canonical  _derivedFromCanonical: [ElementBase]
  derivedFromUri: uri  _derivedFromUri: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: ReferenceInput
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBase
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: PeriodInput
  resourceTrigger: TopicResourceTriggerInput
  canFilterBy: [TopicCanFilterByInput]
}

input TopicResourceTriggerInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  description: String  _description: ElementBase
  resourceType: code  _resourceType: [ElementBase]
  methodCriteria: code  _methodCriteria: [ElementBase]
  queryCriteria: TopicResourceTriggerQueryCriteriaInput
  fhirPathCriteria: String  _fhirPathCriteria: ElementBase
}

input TopicResourceTriggerQueryCriteriaInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  previous: String  _previous: ElementBase
  current: String  _current: ElementBase
  requireBoth: Boolean  _requireBoth: ElementBase
}

input TopicCanFilterByInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  name: String  _name: ElementBase
  matchType: code  _matchType: [ElementBase]
  documentation: markdown  _documentation: ElementBase
}

type TopicReadType {
  Topic(id: ID!): Topic
}

type TopicListType {
  TopicList(_filter: String
    date: [date]
    identifier: [token]
    publisher: [reference]
    resource_type: [token]
    status: [token]
    title: [String]
    trigger_description: [String]
    url: [uri]
    version: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Topic]
}

type TopicConnectionType {
  TopicConection(_filter: String
    date: [date]
    identifier: [token]
    publisher: [reference]
    resource_type: [token]
    status: [token]
    title: [String]
    trigger_description: [String]
    url: [uri]
    version: [token]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [reference]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): TopicConnection
}

type TopicConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [TopicEdge]
}

type TopicEdge {
  mode: String
  score: Float
  resource: Topic
}

type TopicCreateType {
  TopicCreate(resource: TopicInput): TopicCreation
}

type TopicCreation {
  location: String
  resource: Topic
  information: OperationOutcome
}

type TopicUpdateType {
  TopicUpdate(id: ID, resource: TopicInput): TopicUpdate
}

type TopicUpdate {
  resource: Topic
  information: OperationOutcome
}

type TopicDeleteType {
  TopicDelete(id: ID): TopicDelete
}

type TopicDelete {
  information: OperationOutcome
}

