DomainResource (Element): hasValue() or (children().count() > id.count())
DomainResource (Extension): extension.exists() != value.exists()
DomainResource (Narrative.div): htmlChecks()
DomainResource (Narrative.div): htmlChecks()
DomainResource (Attachment): data.empty() or contentType.exists()
DomainResource (Quantity): code.empty() or system.exists()
DomainResource (Duration): code.exists() implies ((system = %ucum) and value.exists())
DomainResource (Distance): (code.exists() or value.empty()) and (system.empty() or system = %ucum)
DomainResource (Count): (code.exists() or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.hasValue().not() or value.toString().contains('.').not())
DomainResource (Age): (code.exists() or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.hasValue().not() or value > 0)
DomainResource (Range): low.empty() or high.empty() or (low <= high)
DomainResource (Period): start.hasValue().not() or end.hasValue().not() or (start <= end)
DomainResource (Ratio): (numerator.empty() xor denominator.exists()) and (numerator.exists() or extension.exists())
DomainResource (Reference): reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))
DomainResource (ContactPoint): value.empty() or system.exists()
DomainResource (Timing.repeat): duration.empty() or durationUnit.exists()
DomainResource (Timing.repeat): period.empty() or periodUnit.exists()
DomainResource (Timing.repeat): duration.exists() implies duration >= 0
DomainResource (Timing.repeat): period.exists() implies period >= 0
DomainResource (Timing.repeat): periodMax.empty() or period.exists()
DomainResource (Timing.repeat): durationMax.empty() or duration.exists()
DomainResource (Timing.repeat): countMax.empty() or count.exists()
DomainResource (Timing.repeat): offset.empty() or (when.exists() and ((when in ('C' | 'CM' | 'CD' | 'CV')).not()))
DomainResource (Timing.repeat): timeOfDay.empty() or when.empty()
DomainResource (DataRequirement.codeFilter): path.exists() xor searchParam.exists()
DomainResource (DataRequirement.dateFilter): path.exists() xor searchParam.exists()
DomainResource (TriggerDefinition): data.empty() or timing.empty()
DomainResource (TriggerDefinition): condition.exists() implies data.exists()
DomainResource (TriggerDefinition): (type = 'named-event' implies name.exists()) and (type = 'periodic' implies timing.exists()) and (type.startsWith('data-') implies data.exists())
DomainResource (Expression): expression.exists() or reference.exists()
DomainResource (ElementDefinition): binding.empty() or type.code.empty() or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'string') or (code = 'uri')).exists()
DomainResource (ElementDefinition): sliceIsConstraining.exists() implies sliceName.exists()
DomainResource (ElementDefinition.binding): valueSet.exists() implies (valueSet.startsWith('http:') or valueSet.startsWith('https') or valueSet.startsWith('urn:'))
DomainResource (ElementDefinition): type.select(code).isDistinct()
DomainResource (ElementDefinition): constraint.select(key).isDistinct()
DomainResource (ElementDefinition): defaultValue.empty() or meaningWhenMissing.empty()
DomainResource (ElementDefinition): sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\/\\-_\\[\\]\\@]+$')
DomainResource (ElementDefinition.type): (code='Reference' or code = 'canonical') or targetProfile.empty()
DomainResource (ElementDefinition): (isModifier.exists() and isModifier) implies isModifierReason.exists()
DomainResource (ElementDefinition): path.matches('[^\\s\\.,:;\\\'"\\/|?!@#$%&*()\\[\\]{}]{1,64}(\\.[^\\s\\.,:;\\\'"\\/|?!@#$%&*()\\[\\]{}]{1,64}(\\[x\\])?(\\:[^\\s\\.]+)?)*')
DomainResource (ElementDefinition.slicing): discriminator.exists() or description.exists()
DomainResource (ElementDefinition): min.empty() or max.empty() or (max = '*') or iif(max != '*', min <= max.toInteger())
DomainResource (ElementDefinition.max): empty() or ($this = '*') or (toInteger() >= 0)
DomainResource (ElementDefinition.type): aggregation.empty() or (code = 'Reference')
DomainResource (ElementDefinition): contentReference.empty() or (type.empty() and defaultValue.empty() and fixed.empty() and pattern.empty() and example.empty() and minValue.empty() and maxValue.empty() and maxLength.empty() and binding.empty())
DomainResource (ElementDefinition): fixed.empty() or (type.count()  <= 1)
DomainResource (ElementDefinition): pattern.empty() or (type.count() <= 1)
DomainResource (ElementDefinition): pattern.empty() or fixed.empty()
DomainResource (ElementDefinition): path.matches('[A-Za-z][A-Za-z0-9]*(\\.[a-z][A-Za-z0-9]*(\\[x])?)*')
DomainResource (ElementDefinition.constraint): expression.exists()
DomainResource (DomainResource): contained.contained.empty()
DomainResource (DomainResource): contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(canonical) = '#').exists()).not()).trace('unmatched', id).empty()
DomainResource (DomainResource): contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()
DomainResource (DomainResource): contained.meta.security.empty()
DomainResource (DomainResource): text.div.exists()
Parameters (Parameters.parameter): (part.exists() and value.empty() and resource.empty()) or (part.empty() and (value.exists() xor resource.exists()))
MetadataResource (MetadataResource): name.matches('[A-Z]([A-Za-z0-9_]){0,254}')
AllergyIntolerance (AllergyIntolerance): verificationStatus='entered-in-error' or clinicalStatus.exists()
AllergyIntolerance (AllergyIntolerance): verificationStatus!='entered-in-error' or clinicalStatus.empty()
CarePlan (CarePlan.activity): detail.empty() or reference.empty()
CareTeam (CareTeam.participant): onBehalfOf.exists() implies (member.resolve() is Practitioner)
Condition (Condition.stage): summary.exists() or assessment.exists()
Condition (Condition.evidence): code.exists() or detail.exists()
Condition (Condition): clinicalStatus.exists() or verificationStatus='entered-in-error' or category.select($this='problem-list-item').empty()
Condition (Condition): abatement.empty() or clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='resolved' or code='remission' or code='inactive')).exists()
Condition (Condition): verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code='entered-in-error').empty() or clinicalStatus.empty()
CapabilityStatement (CapabilityStatement): rest.exists() or messaging.exists() or document.exists()
CapabilityStatement (CapabilityStatement.rest.resource): searchParam.select(name).isDistinct()
CapabilityStatement (CapabilityStatement): (description.count() + software.count() + implementation.count()) > 0
CapabilityStatement (CapabilityStatement): messaging.endpoint.empty() or kind = 'instance'
CapabilityStatement (CapabilityStatement): (kind != 'instance') or implementation.exists()
CapabilityStatement (CapabilityStatement): (kind != 'capability') or (implementation.exists().not() and software.exists())
CapabilityStatement (CapabilityStatement): (kind!='requirements') or (implementation.exists().not() and software.exists().not())
CapabilityStatement (CapabilityStatement): document.select(profile&mode).isDistinct()
CapabilityStatement (CapabilityStatement.rest): resource.select(type).isDistinct()
MolecularSequence (MolecularSequence): coordinateSystem = 1 or coordinateSystem = 0
MolecularSequence (MolecularSequence.referenceSeq): (chromosome.empty() and genomeBuild.empty()) or (chromosome.exists() and genomeBuild.exists())
MolecularSequence (MolecularSequence.referenceSeq): (genomeBuild.count()+referenceSeqId.count()+ referenceSeqPointer.count()+ referenceSeqString.count()) = 1
Composition (Composition.section): text.exists() or entry.exists() or section.exists()
Composition (Composition.section): emptyReason.empty() or entry.empty()
FamilyMemberHistory (FamilyMemberHistory): age.empty() or born.empty()
FamilyMemberHistory (FamilyMemberHistory): age.exists() or estimatedAge.empty()
Goal (Goal.target): (detail.exists() and measure.exists()) or detail.exists().not()
Group (Group): member.empty() or (actual = true)
Immunization (Immunization.education): documentType.exists() or reference.exists()
ImmunizationRecommendation (ImmunizationRecommendation.recommendation): vaccineCode.exists() or targetDisease.exists()
ImplementationGuide (ImplementationGuide.definition): resource.groupingId.all(%context.grouping.id contains $this)
ImplementationGuide (ImplementationGuide): definition.resource.fhirVersion.all(%context.fhirVersion contains $this)
Linkage (Linkage): item.count()>1
List (List): emptyReason.empty() or entry.empty()
List (List): mode = 'changes' or entry.deleted.empty()
List (List): mode = 'working' or entry.date.empty()
MedicationAdministration (MedicationAdministration.dosage): dose.exists() or rate.exists()
MedicationDispense (MedicationDispense): whenHandedOver.empty() or whenPrepared.empty() or whenHandedOver >= whenPrepared
NutritionOrder (NutritionOrder): oralDiet.exists() or supplement.exists() or enteralFormula.exists()
Observation (Observation.referenceRange): low.exists() or high.exists() or text.exists()
Observation (Observation): dataAbsentReason.empty() or value.empty()
Observation (Observation): value.empty() or component.code.where(coding.intersect(%resource.code.coding).exists()).empty()
Organization (Organization): (identifier.count() + name.count()) > 0
Organization (Organization.address): where(use = 'home').empty()
Organization (Organization.telecom): where(use = 'home').empty()
Patient (Patient.contact): name.exists() or telecom.exists() or address.exists() or organization.exists()
ServiceRequest (ServiceRequest): orderDetail.empty() or code.exists()
Questionnaire (Questionnaire.item): answerOption.empty() or initial.empty()
Questionnaire (Questionnaire.item): enableWhen.count() > 2 implies enableBehavior.exists()
Questionnaire (Questionnaire.item): repeats=true or initial.count() <= 1
Questionnaire (Questionnaire.item): (type='group' implies item.empty().not()) and (type.trace('type')='display' implies item.trace('item').empty())
Questionnaire (Questionnaire): descendants().linkId.isDistinct()
Questionnaire (Questionnaire.item): type!='display' or code.empty()
Questionnaire (Questionnaire.item): answerOption.empty() or answerValueSet.empty()
Questionnaire (Questionnaire.item): (type ='choice' or type = 'open-choice' or type = 'decimal' or type = 'integer' or type = 'date' or type = 'dateTime' or type = 'time' or type = 'string' or type = 'quantity') or (answerValueSet.empty() and answerOption.empty())
Questionnaire (Questionnaire.item): type!='display' or (required.empty() and repeats.empty())
Questionnaire (Questionnaire.item.enableWhen): operator = 'exists' implies (answer is Boolean)
Questionnaire (Questionnaire.item): (type!='group' and type!='display') or initial.empty()
Questionnaire (Questionnaire.item): type!='display' or readOnly.empty()
Questionnaire (Questionnaire.item): (type in ('boolean' | 'decimal' | 'integer' | 'string' | 'text' | 'url' | 'open-choice')) or maxLength.empty()
QuestionnaireResponse (QuestionnaireResponse.item): (answer.exists() and item.exists()).not()
RiskAssessment (RiskAssessment.prediction.probabilityRange): (low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))
RiskAssessment (RiskAssessment.prediction): probability is decimal implies (probability as decimal) <= 100
AuditEvent (AuditEvent.entity): name.empty() or query.empty()
ValueSet (ValueSet.compose.include): valueSet.exists() or system.exists()
ValueSet (ValueSet.compose.include): (concept.exists() or filter.exists()) implies system.exists()
ValueSet (ValueSet.compose.include): concept.empty() or filter.empty()
ValueSet (ValueSet.expansion.contains): code.exists() or display.exists()
ValueSet (ValueSet.expansion.contains): code.exists() or abstract = true
ValueSet (ValueSet.expansion.contains): code.empty() or system.exists()
ConceptMap (ConceptMap.group.element.target): comment.exists() or equivalence.empty() or ((equivalence != 'narrower') and (equivalence != 'inexact'))
ConceptMap (ConceptMap.group.unmapped): (mode = 'fixed') implies code.exists()
ConceptMap (ConceptMap.group.unmapped): (mode = 'other-map') implies url.exists()
Appointment (Appointment.participant): type.exists() or actor.exists()
Appointment (Appointment): start.exists() = end.exists()
Appointment (Appointment): (start.exists() and end.exists()) or (status in ('proposed' | 'cancelled' | 'waitlist'))
Appointment (Appointment): Appointment.cancelationReason.exists() implies (Appointment.status='no-show' or Appointment.status='cancelled')
AppointmentResponse (AppointmentResponse): participantType.exists() or actor.exists()
NamingSystem (NamingSystem): kind != 'root' or uniqueId.all(type != 'uuid')
NamingSystem (NamingSystem): uniqueId.where(preferred = true).select(type).isDistinct()
OperationDefinition (OperationDefinition.parameter): type.exists() or part.exists()
OperationDefinition (OperationDefinition.parameter): searchType.exists() implies type = 'string'
OperationDefinition (OperationDefinition.parameter): targetProfile.exists() implies (type = 'Reference' or type = 'canonical')
Bundle (Bundle): type = 'document' implies entry.first().resource.is(Composition)
Bundle (Bundle): total.empty() or (type = 'searchset') or (type = 'history')
Bundle (Bundle): type = 'message' implies entry.first().resource.is(MessageHeader)
Bundle (Bundle): entry.search.empty() or (type = 'searchset')
Bundle (Bundle): entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history'))
Bundle (Bundle): entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history'))
Bundle (Bundle.entry): resource.exists() or request.exists() or response.exists()
Bundle (Bundle): (type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()
Bundle (Bundle.entry): fullUrl.contains('/_history/').not()
Bundle (Bundle): type = 'document' implies (identifier.system.exists() and identifier.value.exists())
Bundle (Bundle): type = 'document' implies (meta.lastUpdated.hasValue())
SearchParameter (SearchParameter): xpath.empty() or xpathUsage.exists()
SearchParameter (SearchParameter): chain.empty() or type = 'reference'
CoverageEligibilityResponse (CoverageEligibilityResponse.insurance.item): category.exists() xor productOrService.exists()
StructureDefinition (StructureDefinition): kind != 'logical' implies snapshot.empty() or snapshot.element.first().path = type
StructureDefinition (StructureDefinition): url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (snapshot.element.defaultValue.empty() and differential.element.defaultValue.empty())
StructureDefinition (StructureDefinition): (snapshot | differential).element.all(path.contains('.').not() implies sliceName.empty())
StructureDefinition (StructureDefinition): snapshot.element.all(id.exists()) and differential.element.all(id.exists())
StructureDefinition (StructureDefinition): kind!='logical'  implies snapshot.element.first().type.empty()
StructureDefinition (StructureDefinition): snapshot.element.all(id.exists()) and snapshot.element.id.trace('ids').isDistinct()
StructureDefinition (StructureDefinition): differential.element.all(id.exists()) and differential.element.id.trace('ids').isDistinct()
StructureDefinition (StructureDefinition): contextInvariant.exists() implies type = 'Extension'
StructureDefinition (StructureDefinition): url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (differential.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')) and snapshot.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')))
StructureDefinition (StructureDefinition.differential): (%resource.kind = 'logical' or element.first().path.startsWith(%resource.type)) and (element.tail().empty() or  element.tail().all(path.startsWith(%resource.differential.element.first().path.replaceMatches('\\..*','')&'.')))
StructureDefinition (StructureDefinition.snapshot): element.all(base.exists())
StructureDefinition (StructureDefinition): derivation = 'constraint' or snapshot.element.select(path).isDistinct()
StructureDefinition (StructureDefinition.mapping): name.exists() or uri.exists()
StructureDefinition (StructureDefinition.snapshot): element.all(definition.exists() and min.exists() and max.exists())
StructureDefinition (StructureDefinition): abstract = true or baseDefinition.exists()
StructureDefinition (StructureDefinition): type != 'Extension' or derivation = 'specialization' or (context.exists())
StructureDefinition (StructureDefinition): snapshot.exists() or differential.exists()
StructureDefinition (StructureDefinition.snapshot): (%resource.kind = 'logical' or element.first().path = %resource.type) and element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.'))
StructureDefinition (StructureDefinition): children().element.where(path.contains('.').not()).label.empty() and children().element.where(path.contains('.').not()).code.empty() and children().element.where(path.contains('.').not()).requirements.empty()
StructureDefinition (StructureDefinition): (kind!='logical'  and differential.element.first().path.contains('.').not()) implies differential.element.first().type.empty()
StructureDefinition (StructureDefinition.differential): element.where(path.contains('.').not()).slicing.empty()
StructureDefinition (StructureDefinition.snapshot.element): binding.empty() or binding.valueSet.exists() or binding.description.exists()
StructureDefinition (StructureDefinition): differential.element.defaultValue.exists() implies (derivation = 'specialization')
StructureMap (StructureMap.group.rule.target): element.exists() implies context.exists()
StructureMap (StructureMap.group.rule.target): context.exists() implies contextType.exists()
TestScript (TestScript.test.action.assert): compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())
TestScript (TestScript.setup.action.assert): (response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'
TestScript (TestScript.test.action.assert): (response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'
TestScript (TestScript.setup.action): operation.exists() xor assert.exists()
TestScript (TestScript.test.action): operation.exists() xor assert.exists()
TestScript (TestScript.variable): expression.empty() or headerField.empty() or path.empty()
TestScript (TestScript.metadata): capability.required.exists() or capability.validated.exists()
TestScript (TestScript.setup.action.assert): extension.exists() or (contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count()  + validateProfileId.count() <=1)
TestScript (TestScript.test.action.assert): extension.exists() or (contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + validateProfileId.count() <=1)
TestScript (TestScript.setup.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' |'search' | 'transaction' | 'history'))
TestScript (TestScript.test.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))
TestScript (TestScript.teardown.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))
TestScript (TestScript.setup.action.assert): compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())
TestReport (TestReport.setup.action): operation.exists() xor assert.exists()
TestReport (TestReport.test.action): operation.exists() xor assert.exists()
Consent (Consent): policy.exists() or policyRule.exists()
Consent (Consent): patient.exists() or scope.coding.where(system='something' and code='patient-privacy').exists().not()
Consent (Consent): patient.exists() or scope.coding.where(system='something' and code='research').exists().not()
Consent (Consent): patient.exists() or scope.coding.where(system='something' and code='adr').exists().not()
Consent (Consent): patient.exists() or scope.coding.where(system='something' and code='treatment').exists().not()
Measure (Measure): group.stratifier.all((code | description | criteria).exists() xor component.exists())
MeasureReport (MeasureReport): (type != 'data-collection') or group.exists().not()
MeasureReport (MeasureReport): group.stratifier.stratum.all(value.exists() xor component.exists())
CodeSystem (CodeSystem): concept.code.combine($this.descendants().concept.code).isDistinct()
Task (Task): lastModified.exists().not() or authoredOn.exists().not() or lastModified >= authoredOn
RequestGroup (RequestGroup.action): resource.exists() != action.exists()
MessageDefinition (MessageDefinition.focus): max='*' or (max.toInteger() > 0)
TerminologyCapabilities (TerminologyCapabilities.codeSystem): version.count() > 1 implies version.all(code.exists())
TerminologyCapabilities (TerminologyCapabilities): (description.count() + software.count() + implementation.count()) > 0
TerminologyCapabilities (TerminologyCapabilities): (kind != 'instance') or implementation.exists()
TerminologyCapabilities (TerminologyCapabilities): (kind != 'capability') or (implementation.exists().not() and software.exists())
TerminologyCapabilities (TerminologyCapabilities): (kind!='requirements') or (implementation.exists().not() and software.exists().not())
InsurancePlan (InsurancePlan): (identifier.count() + name.count()) > 0
MoneyQuantity (MoneyQuantity): (code.exists() or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')
SimpleQuantity (SimpleQuantity): comparator.empty()
